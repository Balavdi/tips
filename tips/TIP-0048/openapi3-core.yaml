openapi: 3.0.3
info:
  title: IOTA CORE REST API
  description: This document specifies the REST API for IOTA CORE node software.
  contact:
    email: contact@iota.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 3.0.0
externalDocs:
  description: Find out more about IOTA
  url: 'https://iota.org'
servers:
  - url: 'http://127.0.0.1:14265'
tags:
  - name: node
    description: Everything about the node itself.
  - name: accounts
    description: Everything about the accounts.
  - name: rewards
    description: Everything about Mana rewards.
  - name: validators
    description: Everything about validators and staking.
  - name: committee
    description: Everything about the committee.
  - name: blocks
    description: Everything about blocks.
  - name: UTXO
    description: Everything about UTXOs.
  - name: commitments
    description: Everything about commitments.

paths:
  /health:
    get:
      tags:
        - node
      summary: Returns the health of the node.
      description: >-
        Returns the health of the node. A node considers itself healthy if it is bootstrapped and its Accepted Tangle Time (ATT) is not 
        further behind its local clock than BootstrapWindow.
      responses:
        '200':
          description: "Successful operation: indicates that the node is healthy."
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
        '503':
          description: "Unsuccessful operation: indicates that the node isn't healthy."

  /api/routes:
    get:
      tags:
        - node
      summary: Returns the available API route groups of the node.
      description: >-
        Returns the available API route groups of the node.
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-routes-response-example'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."

  /api/core/v3/info:
    get:
      tags:
        - node
      summary: Returns general information about the node.
      description: Returns general information about the node.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-info-response-example'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'

  '/api/core/v3/accounts/{bech32Address}/congestion':
    get:
      tags:
        - accounts
      summary: Check if the account is ready to issue a block.
      description: >-
        Check the readiness of the node to issue a new block, the reference mana cost based on the rate setter and current network congestion, and the block issuance credits of the requested account.
      parameters:
        - in: path
          name: bech32Address
          schema:
            type: string
          example: "rms1pqm4xk8e9ny5w5rxjkvtp249tfhlwvcshyr3pc0665jvp7g3hc875k538hl"
          required: true
          description: The Account Address in bech32.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CongestionResponse'
              examples:
                CongestionResponse:
                  $ref: '#/components/examples/get-congestion-estimate-response-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'

  '/api/core/v3/rewards/{outputId}':
    get:
      tags:
        - rewards
      summary: Returns the totally available Mana rewards of an account or delegation output decayed up to endEpoch index provided in the response.
      description: >-
        Returns the totally available Mana rewards of an account or delegation output up until the current epoch index. 
        Note that rewards for an epoch only become available at the beginning of the next epoch. 
        If the end epoch of a staking feature is equal or greater than the current epoch, the rewards response will not include the potential future rewards for those epochs.
        startEpoch and endEpoch indicates the actual range for which reward value is returned and decayed for.
      parameters:
        - in: path
          name: outputId
          schema:
            type: string
          example: "0xf532a53545103276b46876c473846d98648ee418468bce76df4868648dd73e5d"
          required: true
          description: Output ID of an account or delegation output.
        - in: query
          name: slotIndex
          schema:
            type: integer
          example: 50
          description: A client can specify a slot index explicitly, which should be equal to the slot it uses as the commitment input for the claiming transaction. This parameter is only recommended to be provided when requesting rewards for a Delegation Output in delegating state (i.e. when Delegation ID is zeroed). 
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ManaRewardsResponse'
              examples:
                ManaRewardsResponse:
                  $ref: '#/components/examples/get-mana-rewards-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'

  /api/core/v3/committee:
    get:
      tags:
        - committee
      summary: Return the information of committee members.
      # TODO: Revisit when committee selection is implemented, maybe also includes the selected committee of next epoch, if it's selected
      description: Return the information of committee members at the given epoch index. If epoch index is not provided, the current committee members are returned.
      parameters:
        - in: query
          name: epochIndex
          schema:
            type: integer
          example: 20
          required: false
          description: The epoch index to query.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommitteeResponse'
              examples:
                CommitteeResponse:
                  $ref: '#/components/examples/get-committee-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'

  /api/core/v3/validators:
    get:
      tags:
        - validators
      summary: Returns information of all registered validators and if they are active, ordered by their holding stake.
      parameters:
        - in: query
          name: pageSize
          schema:
            type: integer
          example: 1
          required: false
          description: The page number of validators.
        - in: query
          name: cursor
          schema:
            type: string
          example: "16,20"
          required: false
          description: Starts the search from the cursor (requested slot index+start index).
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidatorsResponse'
              examples:
                ValidatorsResponse:
                  $ref: '#/components/examples/get-validators-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'

  /api/core/v3/validators/{bech32Address}:
    get:
      tags:
        - validators
      summary: Return information about a validator.
      parameters:
        - in: path
          name: bech32Address
          schema:
            type: string
          example: "rms1pqm4xk8e9ny5w5rxjkvtp249tfhlwvcshyr3pc0665jvp7g3hc875k538hl"
          required: true
          description: The Account Address of the account.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Validator'
              examples:
                AccountStakingResponse:
                  $ref: '#/components/examples/get-validator-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'

  /api/core/v3/blocks/issuance:
    get:
      tags:
        - blocks
      summary: Return information that is used to attach a block in the network.
      description: >-
        Return information that is used to attach a block in the network, which includes parents, last finalized slot index and the latest commitment the node created.
      parameters:
        - in: query
          name: slotIndex
          schema:
            type: integer
          example: 1
          required: false
          description: The slot index of the commitment and reference mana cost to query.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceBlockHeaderResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-buildingBlock-response-example'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that there are no tips available or the node isn´t synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'

  /api/core/v3/blocks:
    post:
      tags:
        - blocks
      summary: Submit a block.
      description: >-
        Submit a block or a payload. This endpoint will return the identifier of the built block. Only full block is accepted.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitBlockRequest'
            examples:
              Full block with Tagged Data Payload:
                $ref: >-
                  #/components/examples/post-tagged-data-block-request-example-full
              Full block with Transaction Payload:
                $ref: >-
                  #/components/examples/post-transaction-block-request-example-full
          application/vnd.iota.serializer-v2:
            schema:
              type: string
              format: binary
              description: block in raw binary format
        required: true
      responses:
        '201':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitBlockResponse'
              examples:
                default:
                  $ref: '#/components/examples/post-blocks-response-example'
          headers:
            Location:
              description: The blockId of the newly created block.
              schema:
                type: string
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node can´t auto-fill the parents or perform Proof-of-Work."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'
  /api/core/v3/blocks/{blockId}:
    get:
      tags:
        - blocks
      summary: Returns block data as JSON by its identifier.
      description: >-
        Find a block by its identifier. This endpoint returns the given block
        as JSON.
      parameters:
        - in: path
          name: blockId
          schema:
            type: string
          example: "0x2de585533d9c9684747e49f70e5e620a4e6c3fd1c7d8b73520c198c7def29a050200000000000000"
          required: true
          description: Identifier of the block.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
              examples:
                Basic Block - Empty Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-empty-response-example
                Basic Block - Transaction Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-transaction-response-example
                Basic Block - Tagged Data Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-tagged-data-response-example
                Validation Block:
                  $ref: >-
                    #/components/examples/get-block-by-id-validation-response-example
            application/vnd.iota.serializer-v2:
              schema:
                type: string
                format: binary
                description: block in raw binary format
                example: >-
                  0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eb000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000020000016920b176f613ec7be59e68fc68f597eb3393af80f74c7c3db78198147d5f1f92640000000000000000018afe1f314622cc1ef52f16d619d1baccff81816b7e4e35fe268dc247b730acd65d5d2dd3f7df09000000000001000001f7868ab6bb55800b77b8b74191ad8285a9bf428ace579d541fda47661803ff44e0af5c34ad4edf475a01fb46e089a7afcab158b4a0133f32e889083e1c77eef65548933e0c6d2c3b0ac006cd77e77d778bf37b8d38d219fb62a9a2f718d4c9095100000000000000
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/blocks/{blockId}/metadata':
    get:
      tags:
        - blocks
      summary: Find the metadata of a given block.
      description: >-
        Find the metadata of a given block.
      parameters:
        - in: path
          name: blockId
          schema:
            type: string
          example: "0x2de585533d9c9684747e49f70e5e620a4e6c3fd1c7d8b73520c198c7def29a050200000000000000"
          required: true
          description: Identifier of the block.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockMetadataResponse'
              examples:
                New Block with Transaction Payload:
                  $ref: '#/components/examples/get-block-by-id-response-example-new-transaction'
                New Block without Transaction Payload:
                  $ref: '#/components/examples/get-block-by-id-response-example-new'
                Confirmed with Transaction Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-response-example-confirmed-transaction
                Confirmed without Transaction Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-response-example-confirmed
                Conflicting with Transaction Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-response-example-conflicting-transaction
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'
  '/api/core/v3/blocks/{blockId}/full':
    get:
      tags:
        - blocks
      summary: Find the metadata of a given block.
      description: >-
        Find the metadata of a given block.
      parameters:
        - in: path
          name: blockId
          schema:
            type: string
          example: "0x2de585533d9c9684747e49f70e5e620a4e6c3fd1c7d8b73520c198c7def29a050200000000000000"
          required: true
          description: Identifier of the block.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockFullResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-full-block-by-id-tagged-data-response-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'

  '/api/core/v3/outputs/{outputId}':
    get:
      tags:
        - UTXO
      summary: Find an output by its identifier.
      description: Find an output by its identifier.
      parameters:
        - in: path
          name: outputId
          schema:
            type: string
          required: true
          description: >-
            Identifier of the output encoded in hex. An output is identified by
            the concatenation of `transactionId+outputIndex` where `outputIndex` needs to be converted to little endian first.
            Hex-encoded with 0x prefix.
          example: "0xfa0de75d225cca2799395e5fc340702fc7eac821d2bdd79911126f131ae097a20100"
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-outputs-by-id-response-example'
            application/vnd.iota.serializer-v2:
              schema:
                type: string
                format: binary
                description: output in raw binary format
                example: >-
                  0440420f00000000000004056b0c542e18ac5f44a1c13c5922564b7accba030000000000010000000204007ffec9e1233204d9c6dce6812b1539ee96af691ca2e4d9065daa85907d33e5d305007ffec9e1233204d9c6dce6812b1539ee96af691ca2e4d9065daa85907d33e5d30200007ffec9e1233204d9c6dce6812b1539ee96af691ca2e4d9065daa85907d33e5d30203000102030101007ffec9e1233204d9c6dce6812b1539ee96af691ca2e4d9065daa85907d33e5d3
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/outputs/{outputId}/metadata':
    get:
      tags:
        - UTXO
      summary: Returns metadata about an output by its identifier.
      description: Returns metadata about an output by its identifier.
      parameters:
        - in: path
          name: outputId
          schema:
            type: string
          required: true
          description: >-
            Identifier of the output encoded in hex. An output is identified by
            the concatenation of `transactionId+outputIndex` where `outputIndex` (u16) needs to be converted to little endian first.
            Hex-encoded with 0x prefix.
          example: "0xfa0de75d225cca2799395e5fc340702fc7eac821d2bdd79911126f131ae097a20100"
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputMetadataResponse'
              examples:
                unspent:
                  $ref: '#/components/examples/get-output-metadata-by-id-response-unspent-example'
                spent:
                  $ref: '#/components/examples/get-output-metadata-by-id-response-spent-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/outputs/{outputId}/full':
    get:
      tags:
        - UTXO
      summary: Returns metadata about an output and the output structure by its identifier.
      description: Returns the output structure and metadata by its identifier.
      parameters:
        - in: path
          name: outputId
          schema:
            type: string
          required: true
          description: >-
            Identifier of the output encoded in hex. An output is identified by
            the concatenation of `transactionId+outputIndex` where `outputIndex` (u16) needs to be converted to little endian first.
            Hex-encoded with 0x prefix.
          example: "0xfa0de75d225cca2799395e5fc340702fc7eac821d2bdd79911126f131ae097a20100"
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputWithMetadataResponse'
              examples:
                spent:
                  $ref: '#/components/examples/get-full-output-metadata-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
    
  '/api/core/v3/transactions/{transactionId}/included-block':
    get:
      tags:
        - UTXO
      summary: Returns the earliest block containing the transaction that was confirmed.
      description: Returns the earliest block containing the transaction that was confirmed.
      parameters:
        - in: path
          name: transactionId
          schema:
            type: string
          example: "0xaf7579fb57746219561072c2cc0e4d0fbb8d493d075bd21bf25ae81a450c11ef"
          required: true
          description: Identifier of the transaction to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-block-by-id-transaction-response-example'
            application/vnd.iota.serializer-v2:
              schema:
                type: string
                format: binary
                description: block in raw binary format
                example: >-
                  0204174e3151f6ce2cfb7f00829ac4a96a35caa2078cc20eba99359867cd21aad0d65807bb4ad068e6cdadd103218e4e24ed55b62c985d4f64e97808d9f09180f89c7a09324557e9200f39bf493fc8fd6ac43e9ca750c6f6d884cc72386ddcb7d695de9e9d780ba7ebeebc38da16cb53b2a8991d38eee94bcdc3f3ef99aa8c345652530100000600000001c9b000b41dc00400010000af7579fb57746219561072c2cc0e4d0fbb8d493d075bd21bf25ae81a450c11ef00000e6c2998f5177834ecb3bae1596d5056af76e487386eecb19727465b4be86a79010003a08601000000000000010000a18996d96163405e3c0eb13fa3459a07f68a89e8cf7cc239c89e7192344daa5b0069000000050000000b68656c6c6f20776f726c64550000005370616d6d696e6720646174612e0a436f756e743a203037323935320a54696d657374616d703a20323032312d30322d31315431303a32333a34392b30313a30300a54697073656c656374696f6e3a203934c2b57301000000ee26ac07834c603c22130fced361ca58552b0dbfc63e4b73ba24b3b59d9f40500492a353f96883c472e2686a640e77eda30be8fcc417aa9fc1c15eae854661e0253287be6ea68f649f19ca590de0a6c57fb88635ef0e013310e0be2b8360950350390000000000f0
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/transactions/{transactionId}/included-block/metadata':
    get:
      tags:
      - UTXO
      summary: Find the metadata of the earliest block containing the transaction that was confirmed.
      description: >-
        Find the metadata of the earliest block containing the transaction that was confirmed.
      parameters:
        - in: path
          name: transactionId
          schema:
            type: string
          example: "0xaf7579fb57746219561072c2cc0e4d0fbb8d493d075bd21bf25ae81a450c11ef"
          required: true
          description: Identifier of the transaction to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockMetadataResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-block-by-id-response-example-confirmed-transaction'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'
  
  '/api/core/v3/transactions/{transactionId}/metadata':
    get:
      tags:
      - UTXO
      summary: Find the metadata of the earliest block containing the transaction that was confirmed.
      description: >-
        Find the metadata of the earliest block containing the transaction that was confirmed.
      parameters:
        - in: path
          name: transactionId
          schema:
            type: string
          example: "0xaf7579fb57746219561072c2cc0e4d0fbb8d493d075bd21bf25ae81a450c11ef"
          required: true
          description: Identifier of the transaction to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionMetadataResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-transaction-metadata-by-id-response-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'
  
  '/api/core/v3/commitments/{commitmentId}':
    get:
      tags:
        - commitments
      summary: Look up a commitment by a given commitment ID.
      description: Look up a commitment by a given commitment ID.
      parameters:
        - in: path
          name: commitmentId
          schema:
            type: string
          example: "0x7a09324557e9200f39bf493fc8fd6ac43e9ca750c6f6d884cc72386ddcb7d695"
          required: true
          description: Commitment ID of the commitment to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commitment'
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-commitment-response-example
            application/vnd.iota.serializer-v2:
              schema:
                type: string
                format: binary
                description: Commitment in raw binary format
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-commitment-response-binary-example
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/commitments/{commitmentId}/utxo-changes':
    get:
      tags:
        - commitments
      summary: Get all UTXO changes of a given slot by commitment ID.
      description: Get all UTXO changes of a given slot by Commitment ID.
      parameters:
        - in: path
          name: commitmentId
          schema:
            type: string
          example: "0x7a09324557e9200f39bf493fc8fd6ac43e9ca750c6f6d884cc72386ddcb7d695"
          required: true
          description: Commitment ID of the commitment to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UTXOChangesResponse'
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-utxo-changes-response-example
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/commitments/by-index/{index}':
    get:
      tags:
        - commitments
      summary: Look up a commitment by a given commitment index.
      description: Look up a commitment by a given commitment index.
      parameters:
        - in: path
          name: index
          schema:
            type: integer
          example: 154862
          required: true
          description: Index of the commitment to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commitment'
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-commitment-response-example
            application/vnd.iota.serializer-v2:
              schema:
                type: string
                format: binary
                description: Commitment in raw binary format
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-commitment-response-binary-example
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/commitments/by-index/{index}/utxo-changes':
    get:
      tags:
        - commitments
      summary: Get all UTXO changes of a given slot by commitment index.
      description: Get all UTXO changes of a given slot by commitment index.
      parameters:
        - in: path
          name: index
          schema:
            type: integer
          example: 154862
          required: true
          description: Index of the commitment to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UTXOChangesResponse'
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-utxo-changes-response-example
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'

components:
  examples:
    get-routes-response-example:
      value:
        routes:
          - "core/v3"
          - "dashboard-metrics/v2"
          - "debug/v2"
    get-info-response-example:
      value:
        name: test
        version: 2.0.0
        status:
          isHealthy: false
          acceptedTangleTime: "1690879505000000000"
          relativeAcceptedTangleTime: "1690879505000000000"
          confirmedTangleTime: "1690879505000000000"
          relativeConfirmedTangleTime: "1690879505000000000"
          latestCommitmentId: "0xf35c9c906190e9fb02b7969ea69567e5a4bbfdbcc389f93e2b5d0c105e03979aed5b248e"
          latestFinalizedSlot: 1
          latestAcceptedBlockSlot: 2
          latestConfirmedBlockSlot: 3
          pruningEpoch: 4
        metrics:
          blocksPerSecond: "1.1E+00"
          confirmedBlocksPerSecond: "2.2E+00"
          confirmationRate: "3.3E+00"
        protocolParameters:
          - startEpoch: 0
            parameters:
              type: 0
              version: 3
              networkName: TestJungle
              bech32Hrp: tgl
              storageScoreParameters:
                storageCost: "0"
                factorData: 0
                offsetOutputOverhead: "0"
                offsetEd25519BlockIssuerKey: "0"
                offsetStakingFeature: "0"
                offsetDelegation: "0"
              workScoreParameters:
                dataByte: 0
                block: 1
                input: 0
                contextInput: 0
                output: 0
                nativeToken: 0
                staking: 0
                blockIssuer: 0
                allotment: 0
                signatureEd25519: 0
              manaParameters:
                bitsCount: 63
                generationRate: 1
                generationRateExponent: 17
                decayFactors:
                  - 10
                  - 20
                decayFactorsExponent: 32
                decayFactorEpochsSum: 2420916375
                decayFactorEpochsSumExponent: 21
                annualDecayFactorPercentage: 50
              tokenSupply: "2779530283277761"
              genesisSlot: 0
              genesisUnixTimestamp: "1695275822"
              slotDurationInSeconds: 10
              slotsPerEpochExponent: 13
              stakingUnbondingPeriod: 10
              validationBlocksPerSlot: 10
              punishmentEpochs: 10
              livenessThresholdLowerBound: 15
              livenessThresholdUpperBound: 30
              minCommittableAge: 10
              maxCommittableAge: 20
              epochNearingThreshold: 24
              congestionControlParameters:
                minReferenceManaCost: "1"
                increase: "0"
                decrease: "0"
                increaseThreshold: 800000
                decreaseThreshold: 500000
                schedulerRate: 100000
                maxBufferSize: 1000
                maxValidationBufferSize: 100
              versionSignalingParameters:
                windowSize: 7
                windowTargetRatio: 5
                activationOffset: 7
              rewardsParameters:
                profitMarginExponent: 8
                bootstrappingDuration: 1154
                manaShareCoefficient: "2"
                decayBalancingConstantExponent: 8
                decayBalancingConstant: "1"
                poolCoefficientExponent: 11
              targetCommitteeSize: 32
              chainSwitchingTreshold: 2
        baseToken:
          name: Shimmer
          tickerSymbol: SMR
          unit: SMR
          subunit: glow
          decimals: 6
        features:
          - test

    get-buildingBlock-response-example:
      value:
        strongParents:
          - "0x0482f0eba39a23c9a13072c93d828b55543132c47f5f57514d9e55535e9d4f4f35000000"
          - "0xae7c4f55a6db8bf4841e4a38f06d32ab9bd88b927a6ba0bc19bcb19c625ff8b63c000000"
        weakParents:
          - "0x67e57f7446b5a6f152afabb17c6077c26512278a275310a7ff2fa513f4e0b7383d000000"
          - "0x2e65c319e9a2c4a6ff7195f9a1ed896c43d0dded1b906979316d502b158965c23d000000"
        shallowLikeParents:
          - "0xe5fe5231630afaaba609af76787ff1ec9c6088dd17e9cf922152b3facd7bd5883e000000"
          - "0xed4b771b5413f5118dd80021ca07fb727e4c54eec9d28d6566c28cc81e7d267c3f000000"
        latestParentBlockIssuingTime: "1690879505000000000"
        latestFinalizedSlot: 1422
        latestCommitment:
          protocolVersion: 3
          slot: 1432
          previousCommitmentId: "0xc0300d55fe2cdc93191e52685da009f53d40883ae111291e550eed4e7eb7752746010000"
          rootsId: "0x6a8f424929e1f08d87a204efc8a60499b789465aaa28178b77debe75cc2915d3"
          cumulativeWeight: '45678'
          referenceManaCost: '12345'

    post-blocks-response-example:
      value:
        blockId:        "0x0482f0eba39a23c9a13072c93d828b55543132c47f5f57514d9e55535e9d4f4f35000000"

    get-block-by-id-response-example-new-transaction:
      value:
        blockId: "0x0482f0eba39a23c9a13072c93d828b55543132c47f5f57514d9e55535e9d4f4f35000000"
        blockState: "pending"
        transactionState: "pending"
    
    get-block-by-id-response-example-new:
      value:
        blockId: "0x0482f0eba39a23c9a13072c93d828b55543132c47f5f57514d9e55535e9d4f4f35000000"
        blockState: "pending"

    get-block-by-id-response-example-confirmed-transaction:
      value:
        blockId: "0xf7ac0552041789a3931ae76eafa47df063632cddd3f8b11bd0bfffba1bc8c46800000000"
        blockState: "confirmed"
        transactionMetadata:
          transactionId: "0x72f0dfa9ad116ade8bdac8ef291ed2fb8065c6c75d5d3666e8b2053696c94a9e00001000"
          transactionState: "confirmed"
    
    get-transaction-metadata-by-id-response-example:
      value:
        transactionId: "0x72f0dfa9ad116ade8bdac8ef291ed2fb8065c6c75d5d3666e8b2053696c94a9e00001000"
        transactionState: "confirmed"

    get-block-by-id-response-example-confirmed:
      value:
        blockId: "0x3848a6d17070830206e5032fbce2ae3939e60eec0816546e074316b1f66977d04d010000"
        blockState: "confirmed"

    get-block-by-id-response-example-conflicting-transaction:
      value:
        blockId: "0x3848a6d17070830206e5032fbce2ae3939e60eec0816546e074316b1f66977d04d010000"
        blockState: "confirmed"
        transactionMetadata:
          transactionId: "0x72f0dfa9ad116ade8bdac8ef291ed2fb8065c6c75d5d3666e8b2053696c94a9e00001000"
          transactionState: "failed"
          transactionFailureReason: 2

    post-tagged-data-block-request-example-full:
      value:
        header:
          protocolVersion: 3
          networkId: "0"
          issuingTime: "1695275834000000000"
          slotCommitmentId: "0x8633b2eb1845fdecf12ee6c5e789c3cf1f0d0bbb3cee65cb5fb2757e995b5cd700000000"
          latestFinalizedSlot: 0
          issuerId: "0x1d0140675f050c4d6e1018510a103d2f4c134a31463965775f7d284959045100"
        body:
          type: 0
          strongParents:
            - "0x087a2734114e6c041e423a310d7c2039302825484b6c326a560c3a6e281d274a3d18110e"
          weakParents: []
          shallowLikeParents: []
          payload:
            type: 0
            tag: "0x746167"
            data: "0x175d051d3873347d3b2617773240644f780f683064094a0c0b4d1a0c621f0160572c324d371a792536786a2719307b590b5f6d585e3a28740a42080942607a131a5e68242735131920230f72513d01694a54507c340e7817514457462a19213c7270212732506a10097a3e36732c011c6f513202360660240d597d7076014750600c27072540123b7b49137409282d48577a0247125a1c6c13456c2d350a6a224a35"
          maxBurnedMana: "100"
        signature:
          type: 0
          publicKey: "0x1a382c2224662059334e1d6e076b3a490b594c31332e3d652d402f5139263e56"
          signature: "0x15216f030f65647910225f736f627d12600607064d7305235c3818700d01633e5d625e11497a3e514e6f5a0e6a51091e475c604125360813067c740346320520"

    post-transaction-block-request-example-full:
      value:
        header:
          protocolVersion: 3
          networkId: "0"
          issuingTime: "1695275834000000000"
          slotCommitmentId: "0x8633b2eb1845fdecf12ee6c5e789c3cf1f0d0bbb3cee65cb5fb2757e995b5cd700000000"
          latestFinalizedSlot: 0
          issuerId: "0x65767c660e6c324c377e164f3f3c2a267515573d6c53300753532e1c384f521f"
        body:
          type: 0
          strongParents:
            - "0x140615473c0b60295c5a25005079200d4f442d146d64040440215d175502070273570c41"
            - "0x1676520722326709496b63473b675056311c14246a1f015830381e55045d793c6d4f6f74"
            - "0x1d2e710f056f16013d76491d25694124066212550d5a42305e504e5135452b2935595d3d"
            - "0x225654001b334b3b55537e45214054721d04190807391d21522a4e780f2a7a7279727810"
            - "0x40034a2739225358130f741f4455356b524c333c4a0775673f511b1e1262721a20464240"
            - "0x48770460472b4b6e146f5135460e2b31361a34235668153e01161a07136d5f345101463b"
            - "0x4a36305a1d393c151e072e75777d436f7733646d0a007e5b45416a09777d4b425c1f2f64"
          weakParents: []
          shallowLikeParents: []
          payload:
            type: 1
            transaction:
              networkId: "14147312347886322761"
              creationSlot: 0
              contextInputs: []
              inputs:
                - type: 0
                  transactionId: "0x130c2227193b1b53471f57121a6f5b69096657364d4f7122244c7c6435655c2f592b7e60"
                  transactionOutputIndex: 7
                - type: 0
                  transactionId: "0x163443007c67496a1e676d516b4f46394c06673539016279137556061778072865324235"
                  transactionOutputIndex: 110
              allotments:
                - accountId: "0x7905041c4e6a193b26355b15331a5d6c723314703603720a011a613a12147e62"
                  mana: "1538"
              capabilities: ""
              outputs:
                - type: 0
                  amount: "9544"
                  mana: "0"
                  unlockConditions:
                    - type: 0
                      address:
                        type: 0
                        pubKeyHash: "0x2176036e36344e09491f523e010763316a790f673d0520282c5130232e0e6e45"
                  features: []
                - type: 0
                  amount: "9151"
                  mana: "0"
                  unlockConditions:
                    - type: 0
                      address:
                        type: 0
                        pubKeyHash: "0x16435722263d2c227371171b0e722f08025f25484a494259660c16051a090f35"
                  features: []
            unlocks:
              - type: 0
                signature:
                  type: 0
                  publicKey: "0x6d6364560d7e61654c4a4c30796e3e447e3c2b1d4c40671d651c6963086c3c23"
                  signature: "0x58682c5e5d4076434a280733442a7b1737461357256849022d76744a5c357e1a080b347c757543112c52326849322e621c0b532800154d201f39345e225a0a69"
              - type: 0
                signature:
                  type: 0
                  publicKey: "0x3902310d7643157b0b21443d446e26514f07541a060839273b2900553c057e4a"
                  signature: "0x75247e514b07576c7556454b295b2e1e39681a521b387347132c05160d2504022d3f0c70651b4e173e68045b47275c02357921700c187c355c784e2807585056"
          maxBurnedMana: "100"
        signature:
          type: 0
          publicKey: "0x6c7d5c3b573a39062b064a7c4927162a18296b2a7a026365054871563f5a2e1d"
          signature: "0x25393e6d79557407472216133c5c685f3b46316f5932434f3d463a282f575e73227b72122b797d570e3a23143b6531542c2c1d280519213e111736014707036b"
    
    get-committee-example:
      value:
        epoch: 10
        totalStake: '900000000'
        totalValidatorStake: '60000000'
        committee:
          - address: "rms1pqm4xk8e9ny5w5rxjkvtp249tfhlwvcshyr3pc0665jvp7g3hc875k538hl"
            poolStake: '200000'
            validatorStake: '100000'
            fixedCost: '50000'
          - address: "rms1pp4wuuz0y42caz48vv876qfpmffswsvg40zz8v79sy8cp0jfxm4kunflcgt"
            poolStake: '205000'
            validatorStake: '90000'
            fixedCost: '52000'

    get-validators-example:
      value:
        validators:
          - address: "rms1pp4wuuz0y42caz48vv876qfpmffswsvg40zz8v79sy8cp0jfxm4kunflcgt"
            stakingEndEpoch: 100
            poolStake: '200000'
            validatorStake: '100000'
            fixedCost: '50000'
            active: false
            latestSupportedProtocolVersion: 3
            latestSupportedProtocolHash: "0x0c00425134785bf2dbe42e4ec7e288009ebdc38ced797beaa45d5213092021cb"
          - address: "rms1pqm4xk8e9ny5w5rxjkvtp249tfhlwvcshyr3pc0665jvp7g3hc875k538hl"
            stakingEndEpoch: 10
            poolStake: '205000'
            validatorStake: '90000'
            fixedCost: '52000'
            active: true
            latestSupportedProtocolVersion: 3
            latestSupportedProtocolHash: "0x0c00425134785bf2dbe42e4ec7e288009ebdc38ced797beaa45d5213092021cb"
        pageSize: 50

    get-validator-example:
      value:
        address: "rms1pqm4xk8e9ny5w5rxjkvtp249tfhlwvcshyr3pc0665jvp7g3hc875k538hl"
        stakingEndEpoch: 100
        poolStake: '205000'
        validatorStake: '90000'
        fixedCost: '52000'
        active: true
        latestSupportedProtocolVersion: 3
        latestSupportedProtocolHash: "0x0c00425134785bf2dbe42e4ec7e288009ebdc38ced797beaa45d5213092021cb"

    get-mana-rewards-example:
      value:
        startEpoch: 60
        endEpoch: 80
        rewards: '800000'

    get-congestion-estimate-response-example:
      value:
        slot: 20
        ready: true
        referenceManaCost: '50000'
        blockIssuanceCredits: '10000000'

    get-block-by-id-empty-response-example:
      value:
        header:
          protocolVersion: 3
          networkId: "0"
          issuingTime: "1695275834000000000"
          slotCommitmentId: "0x8633b2eb1845fdecf12ee6c5e789c3cf1f0d0bbb3cee65cb5fb2757e995b5cd700000000"
          latestFinalizedSlot: 0
          issuerId: "0x2c2f5d78353a5b196739067e0d343a5c4a746b2655151d1370632743590b0907"
        body:
          type: 0
          strongParents:
            - "0x0262440c401f7c38017069352072443d13467a240f440b285a2c1f445d5d157032043e2d"
            - "0x0e124e700030096f6d21496466770f28495541227d287246532812383a027a1b73355757"
            - "0x67230f6c676d604e163668142a4e59155b2e723a035c130a0131082345763a7d5f500454"
          weakParents: []
          shallowLikeParents: []
          maxBurnedMana: "100"
        signature:
          type: 0
          publicKey: "0x3a56300f6f4d301a727b206148471c1373092359391a74375c53764b141a6c2d"
          signature: "0x460e3b225308117a522a2e5a6a3e4928031a40726d54292103447658685f38624d11535a23687a77083a195c5f510502111a6a7051776f3327190c1613401e5e"

    get-block-by-id-transaction-response-example:
      value:
        header:
          protocolVersion: 3
          networkId: "0"
          issuingTime: "1695275834000000000"
          slotCommitmentId: "0x8633b2eb1845fdecf12ee6c5e789c3cf1f0d0bbb3cee65cb5fb2757e995b5cd700000000"
          latestFinalizedSlot: 0
          issuerId: "0x2f67061e353b5763494b251a1c603c4b0f2b23784d1a2b112f39712a7e190577"
        body:
          type: 0
          strongParents:
            - "0x2d5e2221447d1c104d153d4426474c565d145037245234790228543e2c654748460e391b"
            - "0x4a14252a34665d7b316420697e772b76547036017e487d1e1e4b2c6e0c5920415d327e0c"
            - "0x523d1d0030435d69736d6a5f68625f647e5310076f605520295b042c64296253486c745d"
          weakParents: []
          shallowLikeParents: []
          payload:
            type: 1
            transaction:
              networkId: "14147312347886322761"
              creationSlot: 0
              contextInputs: []
              inputs:
                - type: 0
                  transactionId: "0x6c766054650a712a16787501546000205331190e33013825226b0c2f612f7911114f754c"
                  transactionOutputIndex: 82
                - type: 0
                  transactionId: "0x3b33480f1f77043e12443a50191c0c2061494740747e44057d05794129670b7846314857"
                  transactionOutputIndex: 22
              allotments:
                - accountId: "0x7373587a141f4d5a5b262b185234760d50411c326f05300c2874716d24770b64"
                  mana: "3334"
              capabilities: ""
              outputs:
                - type: 0
                  amount: "9315"
                  mana: "0"
                  unlockConditions:
                    - type: 0
                      address:
                        type: 0
                        pubKeyHash: "0x50783863416b5750544c6f1f165d664c224b4d51506e631e3c221602085e2d59"
                  features: []
                - type: 0
                  amount: "4909"
                  mana: "0"
                  unlockConditions:
                    - type: 0
                      address:
                        type: 0
                        pubKeyHash: "0x271f4e2330314b16747d674c3b6646761a5716180526305253136207255d3854"
                  features: []
            unlocks:
              - type: 0
                signature:
                  type: 0
                  publicKey: "0x18703b62523674525b10272408452a57083f4d116e0b4d706a59402040143922"
                  signature: "0x0f15013f08694a7c24350053077709177d626b664b4739384f68487449764c295223313b5361495d783c016c4c7b5a6f1b0c442c564b73500054120272703704"
              - type: 0
                signature:
                  type: 0
                  publicKey: "0x2556253d420e31611e16592938517a325e46220d39533d0e4f7335202f68672b"
                  signature: "0x3f172a67240f3e161357595d2e11007c0e5e7a4c48713a0e28113775271a1733621a5f2d151a20196a2f78383c4a397e045c3d023e4f680b43561b494b744c5b"
          maxBurnedMana: "100"
        signature:
          type: 0
          publicKey: "0x0d58682550071056456c6b7b634607036564050f3a15513d495a725a5b345f7c"
          signature: "0x685c44265d4a6f2a5653710c6f4a41296b377b44753353082d4619610c2d5e6374153239372b436773354a6421632e3d646f7b1736637321037a0f671f3b3878"

    get-full-block-by-id-tagged-data-response-example:
      value:
        block:
          header:
            protocolVersion: 3
            networkId: "0"
            issuingTime: "1695275834000000000"
            slotCommitmentId: "0x8633b2eb1845fdecf12ee6c5e789c3cf1f0d0bbb3cee65cb5fb2757e995b5cd700000000"
            latestFinalizedSlot: 0
            issuerId: "0x1d0140675f050c4d6e1018510a103d2f4c134a31463965775f7d284959045100"
          body:
            type: 0
            strongParents:
              - "0x087a2734114e6c041e423a310d7c2039302825484b6c326a560c3a6e281d274a3d18110e"
            weakParents: []
            shallowLikeParents: []
            payload:
              type: 0
              tag: "0x746167"
              data: "0x175d051d3873347d3b2617773240644f780f683064094a0c0b4d1a0c621f0160572c324d371a792536786a2719307b590b5f6d585e3a28740a42080942607a131a5e68242735131920230f72513d01694a54507c340e7817514457462a19213c7270212732506a10097a3e36732c011c6f513202360660240d597d7076014750600c27072540123b7b49137409282d48577a0247125a1c6c13456c2d350a6a224a35"
            maxBurnedMana: "100"
          signature:
            type: 0
            publicKey: "0x1a382c2224662059334e1d6e076b3a490b594c31332e3d652d402f5139263e56"
            signature: "0x15216f030f65647910225f736f627d12600607064d7305235c3818700d01633e5d625e11497a3e514e6f5a0e6a51091e475c604125360813067c740346320520"
        metadata:
          blockId: "0x3848a6d17070830206e5032fbce2ae3939e60eec0816546e074316b1f66977d04d010000"
          blockState: "confirmed"

    get-block-by-id-tagged-data-response-example:
      value:
        header:
          protocolVersion: 3
          networkId: "0"
          issuingTime: "1695275834000000000"
          slotCommitmentId: "0x8633b2eb1845fdecf12ee6c5e789c3cf1f0d0bbb3cee65cb5fb2757e995b5cd700000000"
          latestFinalizedSlot: 0
          issuerId: "0x1d0140675f050c4d6e1018510a103d2f4c134a31463965775f7d284959045100"
        body:
          type: 0
          strongParents:
            - "0x087a2734114e6c041e423a310d7c2039302825484b6c326a560c3a6e281d274a3d18110e"
          weakParents: []
          shallowLikeParents: []
          payload:
            type: 0
            tag: "0x746167"
            data: "0x175d051d3873347d3b2617773240644f780f683064094a0c0b4d1a0c621f0160572c324d371a792536786a2719307b590b5f6d585e3a28740a42080942607a131a5e68242735131920230f72513d01694a54507c340e7817514457462a19213c7270212732506a10097a3e36732c011c6f513202360660240d597d7076014750600c27072540123b7b49137409282d48577a0247125a1c6c13456c2d350a6a224a35"
          maxBurnedMana: "100"
        signature:
          type: 0
          publicKey: "0x1a382c2224662059334e1d6e076b3a490b594c31332e3d652d402f5139263e56"
          signature: "0x15216f030f65647910225f736f627d12600607064d7305235c3818700d01633e5d625e11497a3e514e6f5a0e6a51091e475c604125360813067c740346320520"

    get-block-by-id-validation-response-example:
      value:
        header:
          protocolVersion: 3
          networkId: "0"
          issuingTime: "1695275834000000000"
          slotCommitmentId: "0x8633b2eb1845fdecf12ee6c5e789c3cf1f0d0bbb3cee65cb5fb2757e995b5cd700000000"
          latestFinalizedSlot: 0
          issuerId: "0x5201107e2f0b5d3432100560291216613b07725f06001a6a10317d320c767424"
        body:
          type: 1
          strongParents:
            - "0x07772a2f00585b53650c71223c77621e466210097a1177534f54633a4e77657d175d185f"
            - "0x3962007c6c75357d356b15125579770c653f7a55571816701a7c6766347a347b05497402"
          weakParents: []
          shallowLikeParents: []
          highestSupportedVersion: 4
          protocolParametersHash: "0x8f2857e188708fc896dab7fc60196d2f728d6229b20bcd726a60ad5c52a5368b"
        signature:
          type: 0
          publicKey: "0x2a31120a501c0d522d2f76514b4a3b5e415b022356264b4c332a507b431c1965"
          signature: "0x25600518034504557a011174413d0054601730066c221879477b06482966783f340a6d650f48552f4947640d661c54320c790b04716b262d1a74456f7d0b2551"

    get-outputs-by-id-response-example:
      value:
        output:
          type: 3
          amount: "1000"
          unlockConditions:
            - type: 0
              address:
                type: 0
                pubKeyHash: "0x8eaf87ac1f52eb05f2c7c0c15502df990a228838dc37bd18de9503d69afd257d"
          mana: "2000"
        outputIdProof:
          slot: 429632486
          outputIndex: 2
          transactionCommitment: "0x46934d8c62df21e94553f6686a7f9368d9ab4159bcb96f598a94883a866467da"
          outputCommitmentProof:
            type: 0
            l:
              type: 0
              l:
                type: 1
                hash: "0x193a27f187c46a386f0e2a25a884351692b7378aae5e7dd78433f2be85106219"
              r:
                type: 0
                l:
                  type: 2
                  hash: "0x19e4cdd6b17223a935883ddbb80ee6d239a48ea214c29b8b593cc7b3152d15aa"
                r:
                  type: 1
                  hash: "0xf1faa521d1b1e85393efd63a6ed1f33bb851bfc90a681e011989d9c6056948cc"
            r:
              type: 1
              hash: "0xe9cef2152da49d2a78a490bb7e42c6bcd1c96b41ebe156ba90a5b22cb78e3229"


    get-output-metadata-by-id-response-unspent-example:
      value:
        outputId: "0x3477de28a45c565eed3603ab9e90ce0f0d38e8860a3c5ff64ccc70252aab7c9d000000004600"
        blockId: "0x1aaaa9ad9c15c6cd601a5aa5bd61b85428263978a26343949dad9ff89635e7104f1f271b"
        included:
          slot: 5
          transactionId: "0xfdd9e96bac5e4f029b3261c00cd3c74fb4c389184a2018c979d4f31fc1ef53c99add5c74"
          commitmentId: "0xd20959ac38938fddee472bbfd47644da3087a39499cd04e86c9c70fa9c8c0516a81b8aea"
        latestCommitmentId: "0xba4456279dce23cfca37938685c039ea7c72001c1cd8becf72b195a8727cdfd07949d697"

    get-full-output-metadata-example:
      value:
        output:
          type: 3
          amount: "1000"
          unlockConditions:
            - type: 0
              address:
                type: 0
                pubKeyHash: "0x8eaf87ac1f52eb05f2c7c0c15502df990a228838dc37bd18de9503d69afd257d"
          mana: "2000"
        outputIdProof:
          slot: 1893592032
          outputIndex: 0
          transactionCommitment: "0xa0687905318860e64db6932d8423bf7a4418627baee62be8089d5f48aaa1af3a"
          outputCommitmentProof:
            type: 2
            hash: "0x7f9289b104a55e6fb93d60d70f6e85c9706c761b05ccc034f76b465837ca6070"
        metadata:
          outputId: "0x3130f21c723fa597805763739f3a2a40b674af6b4071ef0494331b644a7e4d52000000001300"
          blockId: "0x19e589687082d8f535779df3244908ad6a7b380906fb7ae24efb5fad8a5cfb92a8f8d9a3"
          included:
            slot: 5
            transactionId: "0x3e766157614a3a0e13dbb937b5fb1ef5d1555479c19df80445d03a6710f39d75668bd326"
            commitmentId: "0x7387ebe23a3ac1732fcdb6cef77fc003e1fa6e2dad89dd664df249d6aa2dbdc157dec2c6"
          spent:
            slot: 8
            transactionId: "0x3896f1ede7cbdacbbb4b17f13e953ad45ce0969ea34cc766b5dafe2a15b3e46f998ef4e5"
            commitmentId: "0x26fa9fcbddcf944ced3fd16a73d9c8b2b49dc54dba7629b02da69f7e01249063e7398b2c"
          latestCommitmentId: "0x42a88617c2c4ba2b58f82c8b85524720cdbe3642401e7c613f215658d617c569d1219909"

    get-output-metadata-by-id-response-spent-example:
      value:
        outputId: "0x3130f21c723fa597805763739f3a2a40b674af6b4071ef0494331b644a7e4d52000000001300"
        blockId: "0x19e589687082d8f535779df3244908ad6a7b380906fb7ae24efb5fad8a5cfb92a8f8d9a3"
        included:
          slot: 5
          transactionId: "0x3e766157614a3a0e13dbb937b5fb1ef5d1555479c19df80445d03a6710f39d75668bd326"
          commitmentId: "0x7387ebe23a3ac1732fcdb6cef77fc003e1fa6e2dad89dd664df249d6aa2dbdc157dec2c6"
        spent:
          slot: 8
          transactionId: "0x3896f1ede7cbdacbbb4b17f13e953ad45ce0969ea34cc766b5dafe2a15b3e46f998ef4e5"
          commitmentId: "0x26fa9fcbddcf944ced3fd16a73d9c8b2b49dc54dba7629b02da69f7e01249063e7398b2c"
        latestCommitmentId: "0x42a88617c2c4ba2b58f82c8b85524720cdbe3642401e7c613f215658d617c569d1219909"

    get-commitment-response-example:
      value:
        protocolVersion: 3
        slot: 986
        previousCommitmentId: "0xd91549dbf441da4c7e50063b58c05d5b2bfb1d33b346a2f9a18220ce6207f7a289010000"
        rootsId: "0x6a8f424929e1f08d87a204efc8a60499b789465aaa28178b77debe75cc2915d3"
        cumulativeWeight: '78901'
        referenceManaCost: '600'

    get-commitment-response-binary-example:
      value: "0312000000075b05e0a8fd4b9c7e7bc165b62c48945292f7d76d23f76525f886c416dc0e364089b57c32ddb8c614ed1d2c844401d2a5325b4d153c7f94464bbda3a8d14289b203f96759000000000000009000000000000000"

    get-utxo-changes-response-example:
      value:
        commitmentId: "0x3b264c038283c30094e0cb5d22eaa52c9959bfda084ace3980b30d4be588fa0012000000"
        createdOutputs:
          - "0x2628fd7c1ad5dd635fa76c6f4c2272fbdb658cc3437dbed07f9984580b227b63f0a3e4d40000"
          - "0xfa3d71ea93849b317c2b29c928b726b6d3bd2131c7ad560c9e28952f117fd50c35d6e0890000"
        consumedOutputs:
          - "0xfa3d71ea93849b317c2b29c928b726b6d3bd2131c7ad560c9e28952f117fd50c35d6e0890100"
          - "0x9c40a07de878863fbda03caeb68875254c49199e6b55740f78a4bab3686f89957b1249130000"

  schemas:

    Block:
      description: A block is the object nodes gossip around in the network. It always references other blocks that are known as parents. It is stored as a vertex on the tangle data structure that the nodes maintain. A block can have a maximum size of 32Kb.
      properties:
        header:
          properties:
            protocolVersion:
              type: number
              description: Protocol version identifier. It also tells which protocol rules apply to the block.
            networkId:
              type: string
              description: Network version identifier. It also tells which network the node is running.
            issuingTime:
              type: string
              description: The timestamp of issuing this block, a uint64 string in nanosecond-precision.
            slotCommitmentId:
              type: string
              description: The slot commitment ID contains in this block.
            latestFinalizedSlot:
              type: integer
              description: The latest finalized slot of issuing node.
            issuerId:
              type: string
              description: The identifier of the issuer.
          required:
            - protocolVersion
            - networkId
            - issuingTime
            - slotCommitmentId
            - latestFinalizedSlot
            - issuerId
        body:
          description: The block content.
          oneOf:
            - $ref: '#/components/schemas/BasicBlock'
            - $ref: '#/components/schemas/ValidationBlock'
        signature:
          type: object
          description: The signature of entire block, signed by the issuer.
          oneOf:
            - $ref: '#/components/schemas/Ed25519Signature'
      required:
        - header
        - body
        - signature

    BasicBlock:
      description: A basic block is the object that can carry arbitrary payload, such as a tagged data payload or a transaction.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote a Basic Block.
        strongParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        weakParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        shallowLikeParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        payload:
          description: The inner payload of the block. Can be nil.
          oneOf:
            - $ref: '#/components/schemas/SignedTransactionPayload'
            - $ref: '#/components/schemas/TaggedDataPayload'
        maxBurnedMana:
          type: string
          description: The mana burned in this block.
      required:
        - type
        - strongParents
        - maxBurnedMana

    ValidationBlock:
      description: A validation block is the object that issued by validators.
      properties:
        type:
          type: integer
          description: Set to value 1 to denote a Validation Block.
        strongParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        weakParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        shallowLikeParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        highestSupportedVersion: 
          type: integer
          description: The highest supported version of the protocol.
        protocolParametersHash:
          type: string
          description: The hash of the protocol parameters for the highestSupportedVersion.
      required:
        - type
        - strongParents
        - highestSupportedVersion
        - protocolParametersHash

    SignedTransactionPayload:
      description: The Signed Transaction Payload to be embedded into a block.
      properties:
        type:
          type: integer
          description: Set to value 1 to denote a Signed Transaction Payload.
        transaction:
          type: object
          oneOf:
            - $ref: '#/components/schemas/Transaction'
        unlocks:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SignatureUnlock'
              - $ref: '#/components/schemas/ReferenceUnlock'
              - $ref: '#/components/schemas/AccountUnlock'
              - $ref: '#/components/schemas/NFTUnlock'
      required:
        - type
        - transaction
        - unlocks

    Transaction:
      description: The Transaction to be embedded into a block.
      properties:
        networkId:
          type: string
          description: Network identifier. Plain string encoded number. This field signals for which network the block is meant for. It is computed out of the first 8 bytes of the `BLAKE2b-256` hash of the concatenation of the network name and protocol version string.
        creationSlot:
          type: integer
          description: The slot index in which the transaction was created.
        contextInputs:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/CommitmentInput'
              - $ref: '#/components/schemas/BlockIssuanceCreditInput'
              - $ref: '#/components/schemas/RewardInput'        
        inputs:
          type: array
          description: The inputs of this transaction.
          items:
            oneOf:
              - $ref: '#/components/schemas/UTXOInput'
        allotments:
          type: array
          description: The accounts map with corresponding allotment values.
          items:
            oneOf:
              - $ref: '#/components/schemas/Allotment'
        capabilities:
          type: string
          description: The capabilities of this transaction.
        payload:
          description: The optional embedded payload.
          oneOf:
            - $ref: '#/components/schemas/TaggedDataPayload'
        outputs:
          type: array
          description: The outputs of this transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/BasicOutput'
              - $ref: '#/components/schemas/AccountOutput'
              - $ref: '#/components/schemas/AnchorOutput'
              - $ref: '#/components/schemas/FoundryOutput'
              - $ref: '#/components/schemas/NFTOutput'
              - $ref: '#/components/schemas/DelegationOutput'
      required:
        - networkId
        - creationSlot
        - contextInputs
        - inputs
        - allotments
        - capabilities
        - outputs

    Allotment:
      description: Allotment is a struct that represents a list of account IDs and an allotted value.
      properties:
        accountId: 
          type: string
          description: The account ID to allot the mana to.
        mana:
          type: string
          description: The amount of mana to allot.

    CommitmentInput:
      description: Allows to reference commitment to a certain slot. It is used to provide the VM with the necessary context information from the node, to prove that the time at the transaction execution is past certain slot in the past, as it indicates that the slot has been already committed.
      properties:
        type:
          type: integer
          description: Set to value 1 to denote a Commitment Input.
        commitmentId:
          type: string
          description: The commitment identifier to reference.
      required:
        - type
        - commitmentId

    # TODO: Consider rename it to CreditsInput, need to be aligned to implementaion. 
    BlockIssuanceCreditInput:
      description: Allows to provide the VM with context for the value of the BIC vector for a specific slot. It is necessary information needed for any Account transitions, and account destroying.
      properties:
        type:
          type: integer
          description: Set to value 2 to denote an BIC Input.
        accountId:
          type: string
          description: The account identifier.
      required:
        - type
        - accountId

    RewardInput:
      description: Allows to claim Mana rewards for a referenced account or delegation input in a transaction. This enables the transaction to add the Mana rewards on the output side if the claiming rules of the staking feature or delegation output are adhered to.
      properties:
        type:
          type: integer
          description: Set to value 3 to denote a Reward Input.
        index:
          type: integer
          description: The index of the transaction input for which to claim rewards.
      required:
        - type
        - index

    UTXOInput:
      description: Describes an input which references an unspent transaction output to consume.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote a UTXO Input.
        transactionId:
          type: string
          description: The BLAKE2b-256 hash of the transaction from which the UTXO comes from. Hex-encoded data with 0x prefix.
        transactionOutputIndex:
          type: integer
          description: The index of the output on the referenced transaction to consume.
      required:
        - type
        - transactionId
        - transactionOutputIndex

    BasicOutput:
      description: Describes a basic output with optional features.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote a Basic Output.
        amount:
          type: string
          description: The amount of IOTA tokens to deposit with this BasicOutput output. Plain string encoded number.
        mana:
          type: string
          description: The stored mana held by the output.
        unlockConditions:
          type: array
          description: Unlock conditions that define how the output can be unlocked in a transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/AddressUnlockCondition'
              - $ref: '#/components/schemas/StorageDepositReturnUnlockCondition'
              - $ref: '#/components/schemas/TimelockUnlockCondition'
              - $ref: '#/components/schemas/ExpirationUnlockCondition'
        features:
          type: array
          description: The features on the output
          items:
            anyOf:
              - $ref: '#/components/schemas/SenderFeature'
              - $ref: '#/components/schemas/MetadataFeature'
              - $ref: '#/components/schemas/TagFeature'
              - $ref: '#/components/schemas/NativeTokenFeature'
      required:
        - type
        - amount
        - mana

    AccountOutput:
      description: Describes an account in the ledger that can be controlled by the state and governance controllers.
      properties:
        type:
          type: integer
          description: Set to value 1 to denote an Account Output.
        amount:
          type: string
          description: The amount of IOTA tokens to deposit with this output. Plain string encoded number.
        mana:
          type: string
          description: The stored mana held by the output.
        accountId:
          type: string
          description: The identifier of the account.        
        foundryCounter:
          type: integer
          description: A counter that denotes the number of foundries created by this account.
        unlockConditions:
          type: array
          description: Unlock conditions that define how the output can be unlocked in a transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/AddressUnlockCondition'
        features:
          type: array
          description: Features that add utility to the output but do not impose unlocking conditions.
          items:
            anyOf:
              - $ref: '#/components/schemas/SenderFeature'
              - $ref: '#/components/schemas/MetadataFeature'
              - $ref: '#/components/schemas/BlockIssuerFeature' 
              - $ref: '#/components/schemas/StakingFeature'           
        immutableFeatures:
          type: array
          description: Immutable features that add utility to the output but do not impose unlocking conditions.
            These features need to be kept in future transitions of the UTXO state machine.
          items:
            anyOf:
              - $ref: '#/components/schemas/IssuerFeature'
              - $ref: '#/components/schemas/MetadataFeature'
      required:
        - type
        - amount
        - accountId
        - foundryCounter
        - mana

    AnchorOutput:
      description: Describes an anchor output.
      properties:
        type:
          type: integer
          description: Set to value 2 to denote an Anchor Output.
        amount:
          type: string
          description: The amount of IOTA tokens to deposit with this output. Plain string encoded number.
        mana:
          type: string
          description: The stored mana held by the output.
        anchorId:
          type: string
          description: The identifier of the anchor.        
        stateIndex:
          type: integer
          description: A counter that must increase by 1 every time the account is state transitioned.
        unlockConditions:
          type: array
          description: Unlock conditions that define how the output can be unlocked in a transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/StateControllerAddressUnlockCondition'
              - $ref: '#/components/schemas/GovernorAddressUnlockCondition'
        features:
          type: array
          description: Features that add utility to the output but do not impose unlocking conditions.
          items:
            anyOf:
              - $ref: '#/components/schemas/MetadataFeature'  
              - $ref: '#/components/schemas/StateMetadataFeature'         
        immutableFeatures:
          type: array
          description: Immutable features that add utility to the output but do not impose unlocking conditions.
            These features need to be kept in future transitions of the UTXO state machine.
          items:
            anyOf:
              - $ref: '#/components/schemas/IssuerFeature'
              - $ref: '#/components/schemas/MetadataFeature'
      required:
        - type
        - amount
        - anchorId
        - stateIndex
        - mana

    DelegationOutput:
      description: >-
        Describes an delegation output.
      properties:
        type:
          type: integer
          description: Set to value 5 to denote a Delegation Output.
          example: 5
        amount:
          type: string
          description: >-
            The amount of IOTA tokens held by the output. Encoded as a
            plain string.
          example: '100'
        delegatedAmount:
          type: string
          description: The amount of IOTA tokens that were delegated when the output was created.
        delegationId:
          type: string
          description: >-
            The identifier for this delegation output.
          example: '0x1505ec099896ab05d9e08fbc7101ae4dff0093b3943b28f789ed2ca728bcc8d6'
        validatorAddress:
          type: string
          description: >-
            The Account Address of the validator to which this output is delegating.
          example: '0x1505ec099896ab05d9e08fbc7101ae4dff0093b3943b28f789ed2ca728bcc8d6'
        startEpoch:
          type: integer
          description: >-
            The index of the first epoch for which this output delegates.
          example: '10'
        endEpoch:
          type: integer
          description: >-
            The index of the last epoch for which this output delegates.
          example: '12'
        unlockConditions:
          type: array
          description: >-
            Unlock conditions that define how the output can be unlocked in a
            transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/AddressUnlockCondition'
      required:
        - type
        - amount
        - delegatedAmount
        - delegationId
        - validatorAddress
        - startEpoch
        - endEpoch

    FoundryOutput:
      description: Describes a foundry output that is controlled by an account.
      properties:
        type:
          type: integer
          description: Set to value 3 to denote a Foundry Output.
        amount:
          type: string
          description: The amount of IOTA tokens to deposit with this output. Plain string encoded number.
        serialNumber:
          type: integer
          description: The serial number of the foundry with respect to the controlling account.
        tokenScheme:
          type: array
          description: Defines the supply control scheme of the tokens controlled by the foundry.
          items:
            oneOf:
              - $ref: '#/components/schemas/SimpleTokenScheme'
        unlockConditions:
          type: array
          description: Unlock conditions that define how the output can be unlocked in a transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/ImmutableAccountAddressUnlockCondition'
        features:
          type: array
          description: Features that add utility to the output but do not impose unlocking conditions.
          items:
            anyOf:
              - $ref: '#/components/schemas/MetadataFeature'
              - $ref: '#/components/schemas/NativeTokenFeature'
        immutableFeatures:
          type: array
          description: Immutable features that add utility to the output but do not impose unlocking conditions.
            These features need to be kept in future transitions of the UTXO state machine.
          items:
            anyOf:
              - $ref: '#/components/schemas/MetadataFeature'
      required:
        - type
        - amount
        - serialNumber
        - tokenScheme

    NFTOutput:
      description: Describes an NFT output, a globally unique token with metadata attached.
      properties:
        type:
          type: integer
          description: Set to value 4 to denote a NFT Output.
        amount:
          type: string
          description: The amount of IOTA tokens to deposit with this output. Plain string encoded number.
        mana:
          type: string
          description: The stored mana held by the output
        nftId:
          type: string
          description: Unique identifier of the NFT, which is the BLAKE2b-256 hash of the Output ID that created it. NFT Address = NFT Address Type || NFT ID. Hex-encoded data with 0x prefix.
        unlockConditions:
          type: array
          description: Unlock conditions that define how the output can be unlocked in a transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/AddressUnlockCondition'
              - $ref: '#/components/schemas/StorageDepositReturnUnlockCondition'
              - $ref: '#/components/schemas/TimelockUnlockCondition'
              - $ref: '#/components/schemas/ExpirationUnlockCondition'
        features:
          type: array
          description: Features that add utility to the output but do not impose unlocking conditions.
          items:
            anyOf:
              - $ref: '#/components/schemas/SenderFeature'
              - $ref: '#/components/schemas/MetadataFeature'
              - $ref: '#/components/schemas/TagFeature'
        immutableFeatures:
          type: array
          description: Immutable features that add utility to the output but do not impose unlocking conditions.
            These features need to be kept in future transitions of the UTXO state machine.
          items:
            anyOf:
              - $ref: '#/components/schemas/IssuerFeature'
              - $ref: '#/components/schemas/MetadataFeature'
      required:
        - type
        - amount
        - nftId
        - mana

    Ed25519Address:
      description: The Ed25519 address.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote an Ed25519 Address.
        pubKeyHash:
          type: string
          description: The hex-encoded, 0x prefixed BLAKE2b-256 hash of the Ed25519 public key
      required:
        - type
        - pubKeyHash

    AccountAddress:
      description: Address of an account output.
      properties:
        type:
          type: integer
          description: Set to value 8 to denote an Account Address.
        accountId:
          type: string
          description: The hex-encoded, 0x prefixed BLAKE2b-256 hash of the Output ID that created the account.
      required:
        - type
        - accountId

    NFTAddress:
      description: Address of an NFT account.
      properties:
        type:
          type: integer
          description: Set to value 16 to denote an NFT Address.
        nftId:
          type: string
          description: The hex-encoded, 0x prefixed BLAKE2b-256 hash of the Output ID that created the NFT.
      required:
        - type
        - nftId

    AddressUnlockCondition:
      description: Can be unlocked by unlocking the address.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote an Address Unlock Condition.
        address:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AccountAddress'
            - $ref: '#/components/schemas/NFTAddress'
      required:
        - type
        - address

    ImmutableAccountAddressUnlockCondition:
      description: Can be unlocked by unlocking the permanent account.
        The unlock condition has to be kept in future state transitions of the UTXO state machine.
      properties:
        type:
          type: integer
          description: Set to value 6 to denote an Immutable Account Address Unlock Condition.
        address:
          oneOf:
            - $ref: '#/components/schemas/AccountAddress'
      required:
        - type
        - address

    StorageDepositReturnUnlockCondition:
      description: Can be unlocked by depositing return amount to return address via an output that only has Address Unlock Condition.
      properties:
        type:
          type: integer
          description: Set to value 1 to denote a Storage Deposit Return Unlock Condition.
        returnAddress:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AccountAddress'
            - $ref: '#/components/schemas/NFTAddress'
        amount:
          type: string
          description: Amount of IOTA tokens the consuming transaction must deposit to the address defined in Return Address. Plain string encoded number.
      required:
        - type
        - returnAddress
        - amount

    TimelockUnlockCondition:
      description: Can be unlocked if the CTT (Confirmed Tangle Time) has a >= Unix Timestamp.
      properties:
        type:
          type: integer
          description: Set to value 2 to denote a Timelock Unlock Condition.
        slotIndex:
          type: integer
          description: The slot index until which the timelock applies (inclusive).
      required:
        - type

    ExpirationUnlockCondition:
      description: Defines a unix time until which only Address, defined in Address Unlock Condition, is allowed to unlock the output. After the unix time, only Return Address can unlock it.
      properties:
        type:
          type: integer
          description: Set to value 3 to denote an Expiration Unlock Condition.
        returnAddress:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AccountAddress'
            - $ref: '#/components/schemas/NFTAddress'
        slotIndex:
          type: integer
          description: The slot index at which the expiration happens.
      required:
        - type
        - returnAddress

    StateControllerAddressUnlockCondition:
      description: Can be unlocked by unlocking the address.
      properties:
        type:
          type: integer
          description: Set to value 4 to denote a State Controller Address Unlock Condition.
        address:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AccountAddress'
            - $ref: '#/components/schemas/NFTAddress'
      required:
        - type
        - address

    GovernorAddressUnlockCondition:
      description: Can be unlocked by unlocking the address.
      properties:
        type:
          type: integer
          description: Set to value 5 to denote a Governor Address Unlock Condition.
        address:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AccountAddress'
            - $ref: '#/components/schemas/NFTAddress'
      required:
        - type
        - address

    SenderFeature:
      description: Identifies the validated sender of the output.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote a Sender Feature.
        address:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AccountAddress'
            - $ref: '#/components/schemas/NFTAddress'
      required:
        - type
        - address

    IssuerFeature:
      description: Identifies the validated issuer of the UTXO state machine (account/NFT).
      properties:
        type:
          type: integer
          description: Set to value 1 to denote an Issuer Feature.
        address:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AccountAddress'
            - $ref: '#/components/schemas/NFTAddress'
      required:
        - type
        - address

    BlockIssuerFeature:
      description: A feature which indicates that this account can issue blocks.
      properties:
        type:
          type: integer
          description: Set to value 6 to denote a Block Issuer Feature.
          example: 6
        blockIssuerKeys:
          type: array
          description: The keys allowed to issue blocks from an account with a BlockIssuerFeature.
          items:
              oneOf:
                - $ref: '#/components/schemas/Ed25519PublicKey'
        expirySlot:
          type: string
          description: Indicates when the BlockIssuerKeys are expired.
      required:
        - type
        - blockIssuerKeys
        - expirySlot

    Ed25519PublicKey:
      description: The Ed25519 public key.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote an Ed25519 Public key.
        publicKey:
          type: string
          description: Ed25519 public key in Hex.
      required:
        - type
        - publicKey

    StakingFeature:
      description: A feature which indicates that this account can issue blocks.
      properties:
        type:
          type: string
          description: Set to value 7 to denote a Staking Feature.
          example: 7
        stakedAmount:
          type: string
          description: The amount of IOTA coins that are locked and staked in the containing account.
        fixedCost:
          type: string
          description: The fixed cost that the validator receives from the total pool reward.
        startEpoch:
          type: integer
          description: The epoch index at which the staking starts.
        endEpoch:
          type: integer
          description: The epoch index at which the staking ends.
      required:
        - type
        - stakedAmount
        - fixedCost
        - startEpoch
        - endEpoch

    MetadataFeature:
      description: Defines metadata (arbitrary binary data) that will be stored in the output.
      properties:
        type:
          type: integer
          description: Set to value 2 to denote a Metadata Feature.
        entries:
          type: object
          additionalProperties: 
            type: string
          example: 
            - 'did:iota': '0x68656c6c6f206469676974616c206175746f6e6f6d79'
            - 'hello': '0x776f726c64'
      required:
        - type
        - entries

    StateMetadataFeature:
      description: >-
        Defines a map of key-value pairs. The keys must consist of ASCII characters only and the values are arbitrary byte slices (encoded in Hex).
      properties:
        type:
          type: integer
          description: Set to value 3 to denote a State Metadata Feature.
          example: 3
        entries:
          type: object
          additionalProperties: 
            type: string
          example: 
            - 'did:iota': '0x68656c6c6f206469676974616c206175746f6e6f6d79'
            - 'hello': '0x776f726c64'
      required:
        - type
        - entries

    TagFeature:
      description: Defines an indexation tag to which the output can be indexed by additional node plugins.
      properties:
        type:
          type: integer
          description: Set to value 4 to denote a Tag Feature.
        tag:
          type: string
          description: Hex-encoded binary indexation tag with 0x prefix.
      required:
        - type
        - tag

    NativeTokenFeature:
      description: Defines a native token which represents a token that resides natively on the ledger.
      properties:
        type:
          type: integer
          description: Set to value 5 to denote a Native Token Feature.
        id:
          type: string
          description: The ID of the native token.
        amount:
          type: string
          description: The amount of native token. Hex-encoded number with 0x prefix.
      required:
        - type
        - id
        - amount

    SimpleTokenScheme:
      description: Defines the simple supply control scheme of native tokens. Tokens can be minted by the foundry without additional restrictions as long as maximum supply is requested and circulating supply is not negative.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote a Simple Token Scheme.
        mintedTokens:
          type: string
          description: Minted tokens controlled by this foundry. Hex-encoded number with 0x prefix.
        meltedTokens:
          type: string
          description: Melted tokens controlled by this foundry. Hex-encoded number with 0x prefix.
        maxSupply:
          type: string
          description: Maximum supply of tokens controlled by this foundry. Hex-encoded number with 0x prefix.
      required:
        - type
        - mintedTokens
        - meltedTokens
        - maxSupply

    SignatureUnlock:
      description: Defines an unlock containing a signature to unlock an input.
      properties:
        type:
          type: integer
          description: Denotes a Signature Unlock.
        signature:
          type: object
          oneOf:
            - $ref: '#/components/schemas/Ed25519Signature'
      required:
        - type
        - signature

    Ed25519Signature:
      description: The Ed25519 signature.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote an Ed25519 Signature.
        publicKey:
          type: string
          description: The public key of the Ed25519 keypair which is used to verify the signature. Hex-encoded with 0x prefix.
        signature:
          type: string
          description: The signature signing the serialized Transaction Essence. Hex-encoded with 0x prefix.
      required:
        - type
        - publicKey
        - signature

    ReferenceUnlock:
      description: ReferenceUnlock is an Unlock which references a previous unlock.
      properties:
        type:
          type: integer
          description: Set to value 1 to denote a Reference Unlock.
        reference:
          type: integer
          description: Represents the index of a previous unlock.
      required:
        - type
        - reference

    AccountUnlock:
      description: References a previous unlock that unlocks an Account Output.
      properties:
        type:
          type: integer
          description: Set to value 2 to denote an Account Unlock.
        reference:
          type: integer
          description: Represents the index of a previous unlock.
      required:
        - type
        - reference

    NFTUnlock:
      description: References a previous unlock that unlocks an NFT Output.
      properties:
        type:
          type: integer
          description: Set to value 3 to denote an NFT Unlock.
        reference:
          type: integer
          description: Represents the index of a previous unlock.
      required:
        - type
        - reference

    TaggedDataPayload:
      description: The Tagged Data Payload to be embedded into a block.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote a Tagged Data Payload.
        tag:
          type: string
          description: The tag to allow external tools to find/look up this block. It has a size between 0 and 64 bytes and must be encoded as a hex-string with 0x prefix. Network nodes do not index blocks with Tagged Data Payload by the tag field by default.
        data:
          type: string
          description: The optional data to attach. This may have a length of 0. Hex-encoded with 0x prefix.
      required:
        - type
        - data

    ErrorResponse:
      description: The error format.
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: The application error code.
            message:
              type: string
              description: The error reason.
          required:
            - code
            - message
      required:
        - error

    ForbiddenResponse:
      description: Indicates that this endpoint is not available for public use.
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      example:
        error:
          code: 403
          message: not available for public use

    ServiceUnavailableResponse:
      description: Indicates that the service is unavailable.
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      example:
        error:
          code: 503
          message: service unavailable

    BadRequestResponse:
      description: Indicates that the request was bad.
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      example:
        error:
          code: 400
          message: invalid data provided

    NotFoundResponse:
      description: Indicates that the data was not found.
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      example:
        error:
          code: 404
          message: could not find data

    InternalErrorResponse:
      description: Indicates that the server encountered an unexpected condition, which prevented it from fulfilling the request by the client.
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      example:
        error:
          code: 500
          message: internal server error

    RoutesResponse:
      description: Contains the available API routes of the node.
      properties:
        routes:
          type: array
          items:
            type: string
      required:
        - routes

    InfoResponse:
      description: Returns general information about the node.
      properties:
        name:
          type: string
          description: The name of the node.
        version:
          type: string
          description: The semantic version of the node.       
        status:
          description: Status of the node.
          properties:
            isHealthy:
              type: boolean
              description: Tells whether the node is healthy or not.
            acceptedTangleTime:
              description: A notion of time that is anchored to the latest accepted block. It's in nanosecond-precision. 
              type: string
            relativeAcceptedTangleTime:
              description: The time after Accepted Tangle Time has advanced with the system clock. It's in nanosecond-precision.
              type: string
            confirmedTangleTime:
              description: A notion of time that is anchored to the latest confirmed block. It's in nanosecond-precision.
              type: string
            relativeConfirmedTangleTime:
              description: The time after Confirmed Tangle Time has advanced with the system clock. It's in nanosecond-precision.
              type: string
            latestCommitmentId:
              type: string
              description: The latest slot that the node has committed to.  
            latestFinalizedSlot:
              description: The index of the latest finalized slot.
              type: integer
            latestAcceptedBlockSlot:
              description: The slot index of the latest accepted block.
              type: integer
            latestConfirmedBlockSlot:
              description: The slot index of the latest confirmed block.
              type: integer
            pruningEpoch:
              type: integer
              description: The index of the slot before which the tangle history is pruned.
          required:
            - isHealthy
            - acceptedTangleTime
            - relativeAcceptedTangleTime
            - confirmedTangleTime
            - relativeConfirmedTangleTime
            - latestCommitmentId
            - latestFinalizedSlot
            - latestAcceptedBlockSlot
            - latestConfirmedBlockSlot
            - pruningEpoch
        metrics:
          description: Node metrics.
          properties:
            blocksPerSecond:
              description: The current rate of new blocks per second.
              type: string
              format: float
            confirmedBlocksPerSecond:
              description: The current rate of confirmed blocks per second.
              type: string
              format: float
            confirmationRate:
              description: The ratio of confirmed blocks to new blocks of the last confirmed slot.
              type: string
              format: float
          required:
            - blocksPerSecond
            - confirmedBlocksPerSecond
            - confirmationRate
        protocolParameters:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/ProtocolParameters'
        baseToken:
          description: Gives info about the base token the network uses.
          properties:
            name:
              type: string
              description: The name of the base token of the network.
            tickerSymbol:
              type: string
              description: Ticker symbol of the token to be displayed on trading platforms.
            unit:
              type: string
              description: The primary unit of the token.
            subunit:
              type: string
              description: The name of the smallest possible denomination of the primary unit. subunit * 10^decimals = unit
            decimals:
              type: integer
              description: Number of decimals the primary unit is divisible up to. 
          required:
            - name
            - tickerSymbol
            - unit
            - decimals
        features:
          description: The features that are supported by the node. All features must be lowercase.
          type: array
          items:
            type: string
      required:
        - name
        - version
        - status
        - metrics
        - protocolParameters
        - baseToken
        - features

    ProtocolParameters:
      description: Protocol parameters.
      properties:
        startEpoch:
          description: The start epoch of the set of protocol parameters.
          type: integer
        parameters:
          description: The protocol parameters.
          properties:
            type:
              type: integer
              description: Set to value 0 to denote a IOTA 2.0 protocol parameter. 
            version:
              type: integer
              description: Protocol version used by the network.
            networkName:
              type: string
              description: The Name of the network from which the networkId is derived.
            bech32Hrp:
              type: string
              description: Tells whether the node supports mainnet or testnet addresses. Value `iota` indicates that the node supports mainnet addresses. Value `atoi` indicates that the node supports testnet addresses.
            storageScoreParameters:
              description: The rent structure according to TIP-19.
              properties:
                storageCost:
                  description: Defines the number of IOTA tokens required per unit of storage score.
                  type: string
                factorData:
                  description: Defines the factor to be used for data only fields.
                  type: integer
                offsetOutputOverhead:
                  description: Defines the offset to be used for key/lookup generating fields.
                  type: string
                offsetEd25519BlockIssuerKey:
                  description: Defines the offset to be used for block issuer feature public keys.
                  type: string
                offsetStakingFeature:
                  description: Defines the offset to be used for staking feature.
                  type: string
                offsetDelegation:
                  description: Defines the offset to be used for delegation output.
                  type: string
              required:
                - storageCost
                - factorData
                - offsetOutputOverhead
                - offsetEd25519BlockIssuerKey
                - offsetStakingFeature
                - offsetDelegation
            workScoreParameters:
              description: Work Score Parameters defines the work score parameters used by given node/network.
              properties:
                dataByte:
                  description: DataByte accounts for the network traffic per byte.
                  type: integer
                block:
                  description: Block accounts for work done to process a block in the node software.
                  type: integer
                input:
                  description: Input accounts for loading the UTXO from the database and performing the mana calculations.
                  type: integer
                contextInput:
                  description: contextInput accounts for loading and checking the context input.
                  type: integer
                output:
                  description: Output accounts for storing the UTXO in the database.
                  type: integer
                nativeToken:
                  description: NativeToken accounts for calculations done with native tokens.
                  type: integer
                staking:
                  description: Staking accounts for the existence of a staking feature in the output.
                  type: integer
                blockIssuer:
                  description: BlockIssuer accounts for the existence of a block issuer feature in the output.
                  type: integer
                allotment:
                  description: Allotment accounts for accessing the account based ledger to transform the mana to block issuance credits.
                  type: integer
                signatureEd25519:
                  description: SignatureEd25519 accounts for an Ed25519 signature check.
                  type: integer
              required:
                - dataByte
                - block
                - input
                - contextInput
                - output
                - nativeToken
                - staking
                - blockIssuer
                - allotment
                - signatureEd25519
            manaParameters:
              description: Mana Structure defines the parameters used by mana calculation. 
              properties:
                bitsCount:
                  type: integer
                  description: The number of bits used to represent Mana. 
                generationRate:
                  type: integer
                  description: The amount of potential Mana generated by 1 IOTA in 1 slot.
                generationRateExponent:
                  type: integer
                  description: The scaling of GenerationRate expressed as an exponent of 2.
                decayFactors:
                  type: array
                  description: a lookup table of epoch index diff to mana decay factor (slice index 0 = 1 epoch).
                  items:
                    type: integer                
                decayFactorsExponent:
                  type: integer
                  description: The scaling of DecayFactors expressed as an exponent of 2.
                decayFactorEpochsSum:
                  type: integer
                  description: An integer approximation of the sum of decay over epochs.
                decayFactorEpochsSumExponent:
                  type: integer 
                  description: The scaling of DecayFactorEpochsSum expressed as an exponent of 2.
                annualDecayFactorPercentage:
                  type: integer
                  description: the decay factor for 1 year.
              required:
                - bitsCount
                - generationRate
                - generationRateExponent
                - decayFactors
                - decayFactorsExponent
                - decayFactorEpochsSum
                - decayFactorEpochsSumExponent
                - annualDecayFactorPercentage
            tokenSupply:
              type: string
              description: Current supply of base token. Plain string encoded number.
            genesisSlot:
              type: integer
              description: The slot index of the genesis.
            genesisUnixTimestamp:
              type: string
              description: The genesis timestamp at which the slots start to count. It's in second-precision.
            slotDurationInSeconds:
              type: integer
              description: The duration of a slot, in seconds.
            slotsPerEpochExponent:
              type: integer
              description: The number of slots in an epoch expressed as an exponent of 2.
            stakingUnbondingPeriod:
              type: integer
              description: The unbonding period in epochs before an account can stop staking.
            validationBlocksPerSlot:
              type: integer
              description: The number of validation blocks per slot.
            punishmentEpochs:
              type: integer
              description: The number of epochs worth of Mana that a node is punished with for each additional validation block it issues. 
            livenessThresholdLowerBound:
              type: integer
              description: Determine if a block is eligible by evaluating issuingTimes and commitments in its past-cone to Accepted Tangle Time and lastCommittedSlot respectively.
            livenessThresholdUpperBound:
              type: integer
              description: Determine if a block is eligible by evaluating issuingTimes and commitments in its past-cone to Accepted Tangle Time and lastCommittedSlot respectively.
            minCommittableAge:
              type: integer
              description: MinCommittableAge is the minimum age relative to the accepted tangle time slot index that a slot can be committed.
            maxCommittableAge:
              type: integer
              description: MaxCommittableAge is the maximum age for a slot commitment to be included in a block relative to the slot index of the block issuing time.
            epochNearingThreshold:
              type: integer
              description: Determine the slot that should trigger a new committee selection for the next and upcoming epoch.
            congestionControlParameters:
              description: Congestion Control Parameters defines the parameters used to calculate the Reference Mana Cost (RMC).
              properties:
                minReferenceManaCost:
                  description: Min Reference Mana Cost is the minimum value of the reference Mana cost.
                  type: string
                increase:
                  description: Increase is the increase step size of the reference Mana cost.
                  type: string
                decrease:
                  description: Decrease is the decrease step size of the reference Mana cost.
                  type: string
                increaseThreshold:
                  description: IncreaseThreshold is the threshold for increasing the reference Mana cost.
                  type: integer
                decreaseThreshold:
                  description: DecreaseThreshold is the threshold for decreasing the reference Mana cost.
                  type: integer
                schedulerRate:
                  description: SchedulerRate is the rate at which the scheduler runs in workscore units per second.
                  type: integer
                maxBufferSize:
                  description: MaxBufferSize is the maximum size of the buffer.
                  type: integer
                maxValidationBufferSize:
                  description: MaxValidationBufferSize is the maximum size of the validation buffer.
                  type: integer
              required:
                - minReferenceManaCost
                - increase
                - decrease
                - increaseThreshold
                - decreaseThreshold
                - schedulerRate
                - maxBufferSize
            versionSignalingParameters:
              description: The version signaling parameters.
              properties:
                windowSize:
                  type: integer
                  description: The size of the window in epochs to find which version of protocol parameters was most signaled, from currentEpoch - windowSize to currentEpoch.
                windowTargetRatio:
                  type: integer
                  description: The target number of supporters for a version to win in a windowSize.
                activationOffset:
                  type: integer
                  description: The offset in epochs to activate the new version of protocol parameters.
              required:
                - windowSize
                - windowTargetRatio
                - activationOffset
            rewardsParameters:
              description: Rewards Parameters defines the parameters that are used to calculate the rewards. 
              properties: 
                profitMarginExponent:
                  type: integer
                  description: ProfitMarginExponent is used for shift operation for calculation of profit margin.
                bootstrappingDuration:
                  type: integer
                  description: The length in epochs of the bootstrapping phase.
                manaShareCoefficient:
                  type: string
                  description: The coefficient used for calculation of initial rewards.
                decayBalancingConstantExponent:
                  type: integer
                  description: DecayBalancingConstantExponent is the exponent used for calculation of the initial reward.
                decayBalancingConstant:
                  type: string
                  description: An integer approximation calculated based on chosen DecayBalancingConstantExponent. 
                poolCoefficientExponent:
                  type: integer
                  description: PoolCoefficientExponent is the exponent used for shifting operation in the pool rewards calculations.
              required:
                - profitMarginExponent
                - bootstrappingDuration
                - manaShareCoefficient
                - decayBalancingConstantExponent
                - decayBalancingConstant
                - poolCoefficientExponent
            targetCommitteeSize:
              type: integer
              description: The target size of the committee.
            chainSwitchingTreshold:
              type: integer
              description: The number of heavier slots that a chain needs to be ahead of the current chain to be considered for switching.
          required:
            - version
            - networkName
            - bech32Hrp
            - tokenSupply
            - storageScoreParameters
            - workScoreParameters
            - manaParameters
            - genesisSlot
            - genesisUnixTimestamp
            - slotDurationInSeconds
            - slotsPerEpochExponent
            - stakingUnbondingPeriod
            - validationBlocksPerSlot
            - punishmentEpochs
            - livenessThresholdLowerBound
            - livenessThresholdUpperBound
            - minCommittableAge
            - maxCommittableAge
            - epochNearingThreshold
            - congestionControlParameters
            - versionSignalingParameters
            - rewardsParameters
            - targetCommitteeSize
            - chainSwitchingTreshold
      required:
        - startEpoch
        - parameters

    ValidatorsResponse:
      description: Returns a paginated list of all registered validators ready for the next epoch and indicates if they were active recently (are eligible for committee selection).
      properties:
        validators:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/Validator'
        pageSize:
          type: integer
          description: The number of validators returned per one API request with pagination.
        cursor:
          type: string
          description: The cursor that needs to be provided as cursor query parameter to request the next page. Cursor is absent if the last page is returned.

    ManaRewardsResponse:
      description: Returns the mana rewards of an account or delegation output.
      properties:
        startEpoch:
          type: integer
          description: The starting epoch index for which the mana rewards are returned.
        endEpoch:
          type: integer
          description: The ending epoch index for which the mana rewards are returned, the decay is applied up to this point (inclusive).
        rewards:
          type: string
          description: The amount of totally available rewards the requested output may claim.
    
    CommitteeResponse:
      description: Returns the validator information of the committee.
      properties:
        epoch:
          type: integer
          description: The epoch index of the committee.
        totalStake:
          type: string
          description: The total amount of delegated and staked IOTA tokens in the selected committee.
        totalValidatorStake:
          type: string
          description: The total amount of staked IOTA tokens in the selected committee.
        committee:
          type: array
          description: The validators of the committee.
          items:
            oneOf:
              - $ref: '#/components/schemas/CommitteeMember'

    CommitteeMember:
      description: Returns information of a committee member.
      properties:
        address: 
          type: string
          description: The account address of the validator.
        poolStake:
          type: string
          description: The total stake of the pool, including delegators.
        validatorStake:
          type: string
          description: The stake of a validator.
        fixedCost:
          type: string
          description: The fixed cost of the validator, which it receives as part of its Mana rewards.

    Validator:
      description: Returns information of a validator.
      properties:
        address: 
          type: string
          description: The account address of the validator.
        stakingEndEpoch:
          type: integer
          description: The epoch index until which the validator registered to stake.
        poolStake:
          type: string
          description: The total stake of the pool, including delegators.
        validatorStake:
          type: string
          description: The stake of a validator.
        fixedCost:
          type: string
          description: The fixed cost of the validator, which it receives as part of its Mana rewards.
        active:
          type: boolean
          description: Shows whether validator was active recently.
        latestSupportedProtocolVersion:
          type: integer
          description: The latest protocol version the validator supported.
        latestSupportedProtocolHash:
          type: string
          description: The latest protocol hash the validator supported.
      required:
        - address
        - stakingEndEpoch
        - poolStake
        - validatorStake
        - fixedCost
        - active
        - latestSupportedProtocolVersion
        - latestSupportedProtocolHash

    IssuanceBlockHeaderResponse:
      description: Return information that is used to attach a block in the network.
      properties:
        strongParents:
          type: array
          items:
            type: string
          description: The block identifiers that can be used to a attach a block to. Hex-encoded with 0x prefix.
        weakParents:
          type: array
          items:
            type: string
          description: The block identifiers that can be used to a attach a block to. Hex-encoded with 0x prefix.
        shallowLikeParents:
          type: array
          items:
            type: string
          description: The block identifiers that can be used to a attach a block to. Hex-encoded with 0x prefix.
        latestParentBlockIssuingTime:
          type: string
          description: The latest issuing time of the returned parents.
        latestFinalizedSlot:
          type: integer
          description: The latest finalized slot index.
        latestCommitment:
          $ref: '#/components/schemas/Commitment'

    CongestionResponse:
      description: Provides the cost and readiness to issue estimates.
      properties:
        slot:
          type: integer
          description: The slot index for which the congestion estimate is provided.
        ready:
          type: boolean
          description: >
            Indicates if a node is ready to issue a block in a current congestion or should wait.
        referenceManaCost:
          type: string
          description: The cost in mana for issuing a block in a current congestion estimated based on RMC and slot index.
        blockIssuanceCredits:
          type: string
          description: The Block Issuance Credits of the requested account.
      required:
        - slot
        - ready
        - referenceManaCost
        - blockIssuanceCredits


    Commitment:
      description: An object embedded to a block, containing a summary of a slot.
      properties:
        protocolVersion:
          type: integer
          description: The version of the protocol running.
        slot:
          type: integer
          description: The slot index of the commitment.
        previousCommitmentId:
          type: string
          description: The commitment identifier of the previous slot.
        rootsId:
          type: string
          description: The digest of multiple merkle roots within this slot.
        cumulativeWeight:
          type: string
          description:
            The sum of previous slot commitment cumulative weight and 
            weight of issuers of accepted blocks within <code>index</code> minus <code>Maximum Committable Age</code>. It indicates the weight of the chain at <code>index</code> minus <code>Maximum Committable Age</code> committed at <code>index</code> slot.
        referenceManaCost:
          type: string
          description: This field provides the Reference Mana Cost (RMC) to be used in the slot with index Index + Max Committable Age.
      required:
        - protocolVersion
        - slot
        - previousCommitmentId
        - rootsId
        - cumulativeWeight
        - referenceManaCost

    SubmitBlockRequest:
      description: Submits a block to the node.
      properties:
        allOf:
          $ref: '#/components/schemas/Block'

    SubmitBlockResponse:
      description: Returns the block identifier of the submitted block.
      properties:
        blockId:
          type: string
          description: The block identifier of the submitted block. Hex-encoded with 0x prefix.
      required:
        - blockId

    BlockFullResponse:
      description: Returns the block structure and the metadata of a given block.
      properties:
        block:
          $ref: '#/components/schemas/Block'
          description: The requested block structure.
        metadata:
          $ref: '#/components/schemas/BlockMetadataResponse'
          description: The metadata of the requested block.
      required:
        - block
        - metadata

    BlockMetadataResponse:
      description: Returns the metadata of a given block.
      properties:
        blockId:
          type: string
          description: The identifier of the block. Hex-encoded with 0x prefix.
        blockState:
          type: string
          enum:
            - pending
            - confirmed
            - finalized
            - rejected
            - failed
          description: If `pending`, the block is stored but not confirmed. If `confirmed`, the block is confirmed with the first level of knowledge. If `finalized`, the block is included and cannot be reverted anymore. If `rejected`, the block is rejected by the node, and user should reissue payload if it contains one. If `failed`, the block is not successfully issued due to failure reason.
        blockFailureReason:
          type: integer
          enum: [1,2,3,4,5,6,7,8,9,10,11,12,255]
          description: |
            Values:
              * `1` - denotes that the block is too old to issue.
              * `2` - denotes that the block's parents are too old.
              * `3` - denotes that one of block's parents does not exist.
              * `4` - denotes that one of block's parents is invalid.
              * `5` - denotes that the issuer account could not be found.
              * `6` - denotes that the block version is invalid to retrieve the corresponding protocol information.
              * `7` - denotes that the Mana cost could not be calculated.
              * `8` - denotes that the issuer account burned insufficient Mana for the block.
              * `9` - denotes that the account is invalid, e.g. the account has negative Block Issuance Credits, or the account has expired. 
              * `10` - denotes that the signature is invalid.
              * `11` - denotes that the block is dropped due to congestion.
              * `12` - denotes that the payload is invalid.
              * `255` - denotes that the block is invalid.
        transactionMetadata:
          description: The metadata of the transactions in the block.
          $ref: '#/components/schemas/TransactionMetadataResponse'          
      required:
        - blockId
        - blockState

    TransactionMetadataResponse:
      description: Returns the metadata of a given block.
      properties:
        transactionId:
          type: string
          description: The identifier of the block. Hex-encoded with 0x prefix.
        transactionState:
          type: string
          enum:
            - pending
            - confirmed
            - finalized
            - failed
          description: If 'pending', the block contains not yet included transaction. If 'confirmed' means transaction is confirmed with the first level of knowledge. If 'finalized' means transaction is included and cannot be reverted anymore. If 'failed' means transaction is not successfully issued due to failure reason.
        transactionFailureReason:
          type: integer
          enum: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,255]
          description: >
            Values:
              * `1` - denotes that the referenced UTXO was already spent.
              * `2` - denotes that the transaction is conflicting with another transaction. Conflicting specifically means a double spend situation that both transaction pass all validation rules, eventually losing one(s) should have this reason. 
              * `3` - denotes that the referenced UTXO is invalid.
              * `4` - denotes that the transaction is invalid.
              * `5` - denotes that the sum of the inputs and output base token amount does not match.
              * `6` - denotes that the unlock block signature is invalid.
              * `7` - denotes that the configured timelock is not yet expired.
              * `8` - denotes that the given native tokens are invalid.
              * `9` - denotes that the return amount in a transaction is not fulfilled by the output side.
              * `10` - denotes that the input unlock is invalid.
              * `11` - denotes that an output contains a Sender with an ident (address) which is not unlocked.
              * `12` - denotes that the chain state transition is invalid.
              * `13` - denotes that the referenced input is created after transaction issuing time.
              * `14` - denotes that the mana amount is invalid.
              * `15` - denotes that the Block Issuance Credits Input is invalid.
              * `16` - denotes that Reward Context Input is invalid.
              * `17` - denotes that Commitment Context Input is invalid.
              * `18` - denotes that Staking Feature is not provided in account output when claiming rewards.
              * `19` - denotes that fail to claim staking reward.
              * `20` - denotes that fail to claim delegation reward.
              * `21` - denotes that the burning of native tokens was not allowed in the transaction capabilities.
              * `22` - denotes that the burning of mana was not allowed in the transaction capabilities.
              * `23` - denotes that the destruction of accounts was not allowed in the transaction capabilities.
              * `24` - denotes that the destruction of anchors was not allowed in the transaction capabilities.
              * `25` - denotes that the destruction of foundries was not allowed in the transaction capabilities.
              * `26` - denotes that the destruction of nfts was not allowed in the transaction capabilities.
              * `255` - denotes that the semantic validation failed.
      required:
        - transactionId
        - transactionState

    BlockResponse:
      description: Returns a given block.
      properties:
        allOf:
          $ref: '#/components/schemas/Block'

    OutputResponse:
      description: Returns an output.
      properties:
        output:
            anyOf:
              - $ref: '#/components/schemas/BasicOutput'
              - $ref: '#/components/schemas/AccountOutput'
              - $ref: '#/components/schemas/AnchorOutput'
              - $ref: '#/components/schemas/FoundryOutput'
              - $ref: '#/components/schemas/NFTOutput'
              - $ref: '#/components/schemas/DelegationOutput'
        outputIdProof:
          allOf:
              - $ref: '#/components/schemas/OutputIdProof'
      required:
        - output
        - outputIdProof
          
    OutputIdProof:
      description: The proof of the output identifier.
      properties:
        slot:
          type: integer
          description: The slot index of the output.
        outputIndex:
          type: integer
          description: The index of the output within the corresponding transaction.
        transactionCommitment:
          type: string
          description: The commitment of the transaction that created the output. Hex-encoded with 0x prefix.
        outputCommitmentProof:
          description: The proof of the output commitment. Hex-encoded with 0x prefix.
          anyOf:
              - $ref: '#/components/schemas/HashableNode'
              - $ref: '#/components/schemas/LeafHash'
              - $ref: '#/components/schemas/ValueHash'
      required:
        - slot
        - outputIndex
        - transactionCommitment
        - outputCommitmentProof

    HashableNode:
      description: Node contains the hashes of the left and right children of a node in the tree.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote a Hashable Node.
        l:
          description: The left node. Hex-encoded with 0x prefix.
          anyOf:
          - $ref: '#/components/schemas/HashableNode'
          - $ref: '#/components/schemas/LeafHash'
          - $ref: '#/components/schemas/ValueHash'
        r:
          description: The right node. Hex-encoded with 0x prefix.
          anyOf:
          - $ref: '#/components/schemas/HashableNode'
          - $ref: '#/components/schemas/LeafHash'
          - $ref: '#/components/schemas/ValueHash'
      required:
        - type
        - node

    LeafHash:
      description: Leaf Hash contains the hash of a leaf in the tree.
      properties:
        type:
          type: integer
          description: Set to value 1 to denote a Leaf Hash.
        hash:
          type: string
          description: The hash of a leaf in the tree. Hex-encoded with 0x prefix.
      required:
        - type
        - hash

    ValueHash:
      description: Value Hash contains the hash of the value for which the proof is being computed.
      properties:
        type:
          type: integer
          description: Set to value 2 to denote a Value Hash.
        hash:
          type: string
          description: the hash of the value for which the proof is being computed. Hex-encoded with 0x prefix.
      required:
        - type
        - hash


    OutputWithMetadataResponse:
      description: Returns an output.
      properties:
        output:
          anyOf:
            - $ref: '#/components/schemas/BasicOutput'
            - $ref: '#/components/schemas/AccountOutput'
            - $ref: '#/components/schemas/AnchorOutput'
            - $ref: '#/components/schemas/FoundryOutput'
            - $ref: '#/components/schemas/NFTOutput'
            - $ref: '#/components/schemas/DelegationOutput'
        outputIdProof:
          allOf:
              - $ref: '#/components/schemas/OutputIdProof'
        metadata:
          allOf:
            - $ref: '#/components/schemas/OutputMetadataResponse'
      required:
        - output
        - outputIdProof
        - metadata

    OutputMetadataResponse:
      description: Returns metadata about an output.
      properties:
        outputId:
          type: string
          description: The output identifier of requested output. Hex-encoded with 0x prefix.
        blockId:
          type: string
          description: The block identifier that references the output. Hex-encoded with 0x prefix.
        included:
          properties:
            slot:
              type: integer
              description: The slot index in which the output is included.
            transactionId:
              type: string
              description: The identifier of the transaction. Hex-encoded with 0x prefix.
            commitmentId:
              type: string
              description: The commitment ID at which the output was included into the ledger.
          required:
            - slot
            - transactionId
        spent:
          properties:
            slot:
              type: integer
              description: The slot index in which the output is spent.
            transactionId:
              type: string
              description: The transaction ID that spent the output. Hex-encoded with 0x prefix.
            commitmentId:
              type: string
              description: The commitment ID that includes the spending of the ouptut.
          required:
            - slot
            - transactionId
        latestCommitmentId:
          type: string
          description: The current latest commitment id for which the request was made.
      required:
        - outputId
        - blockId
        - included
        - latestCommitmentId

    UTXOChangesResponse:
      description: Returns all UTXO changes of the given slot.
      properties:
        commitmentId:
          type: string
          description: The commitment ID of the requested slot that contains the changes. Hex-encoded with 0x prefix.
        createdOutputs:
          description: The created outputs of the given slot.
          type: array
          items:
            type: string
            description: Hex-encoded with 0x prefix.
        consumedOutputs:
          description: The consumed outputs of the given slot.
          type: array
          items:
            type: string
            description: Hex-encoded with 0x prefix.
      required:
        - slot
        - createdOutputs
        - consumedOutputs
